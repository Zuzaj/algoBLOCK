# Generated from algoCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,31,196,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,
        1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
        11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,
        19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,
        23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,
        29,1,29,1,30,1,30,0,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        1,0,0,195,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,1,63,1,0,0,0,3,65,1,0,0,0,5,76,1,0,0,0,7,95,1,
        0,0,0,9,97,1,0,0,0,11,100,1,0,0,0,13,103,1,0,0,0,15,105,1,0,0,0,
        17,107,1,0,0,0,19,109,1,0,0,0,21,111,1,0,0,0,23,113,1,0,0,0,25,115,
        1,0,0,0,27,117,1,0,0,0,29,119,1,0,0,0,31,121,1,0,0,0,33,123,1,0,
        0,0,35,132,1,0,0,0,37,134,1,0,0,0,39,138,1,0,0,0,41,144,1,0,0,0,
        43,147,1,0,0,0,45,150,1,0,0,0,47,153,1,0,0,0,49,158,1,0,0,0,51,165,
        1,0,0,0,53,172,1,0,0,0,55,178,1,0,0,0,57,187,1,0,0,0,59,191,1,0,
        0,0,61,194,1,0,0,0,63,64,5,44,0,0,64,2,1,0,0,0,65,66,5,91,0,0,66,
        67,5,97,0,0,67,68,5,45,0,0,68,69,5,122,0,0,69,70,5,65,0,0,70,71,
        5,45,0,0,71,72,5,90,0,0,72,73,5,95,0,0,73,74,5,93,0,0,74,75,5,43,
        0,0,75,4,1,0,0,0,76,77,5,91,0,0,77,78,5,48,0,0,78,79,5,45,0,0,79,
        80,5,57,0,0,80,81,5,93,0,0,81,82,5,43,0,0,82,83,5,40,0,0,83,84,1,
        0,0,0,84,85,9,0,0,0,85,86,5,32,0,0,86,87,5,91,0,0,87,88,5,48,0,0,
        88,89,5,45,0,0,89,90,5,57,0,0,90,91,5,93,0,0,91,92,5,43,0,0,92,93,
        5,41,0,0,93,94,5,63,0,0,94,6,1,0,0,0,95,96,5,61,0,0,96,8,1,0,0,0,
        97,98,5,63,0,0,98,99,5,61,0,0,99,10,1,0,0,0,100,101,5,47,0,0,101,
        102,5,61,0,0,102,12,1,0,0,0,103,104,5,60,0,0,104,14,1,0,0,0,105,
        106,5,62,0,0,106,16,1,0,0,0,107,108,5,43,0,0,108,18,1,0,0,0,109,
        110,5,45,0,0,110,20,1,0,0,0,111,112,5,42,0,0,112,22,1,0,0,0,113,
        114,5,47,0,0,114,24,1,0,0,0,115,116,5,91,0,0,116,26,1,0,0,0,117,
        118,5,93,0,0,118,28,1,0,0,0,119,120,5,40,0,0,120,30,1,0,0,0,121,
        122,5,41,0,0,122,32,1,0,0,0,123,124,5,91,0,0,124,125,5,32,0,0,125,
        126,5,9,0,0,126,127,5,13,0,0,127,128,5,93,0,0,128,129,5,43,0,0,129,
        130,1,0,0,0,130,131,6,16,0,0,131,34,1,0,0,0,132,133,5,10,0,0,133,
        36,1,0,0,0,134,135,5,102,0,0,135,136,5,111,0,0,136,137,5,114,0,0,
        137,38,1,0,0,0,138,139,5,119,0,0,139,140,5,104,0,0,140,141,5,105,
        0,0,141,142,5,108,0,0,142,143,5,101,0,0,143,40,1,0,0,0,144,145,5,
        105,0,0,145,146,5,102,0,0,146,42,1,0,0,0,147,148,5,100,0,0,148,149,
        5,111,0,0,149,44,1,0,0,0,150,151,5,116,0,0,151,152,5,111,0,0,152,
        46,1,0,0,0,153,154,5,116,0,0,154,155,5,104,0,0,155,156,5,101,0,0,
        156,157,5,110,0,0,157,48,1,0,0,0,158,159,5,108,0,0,159,160,5,101,
        0,0,160,161,5,110,0,0,161,162,5,103,0,0,162,163,5,116,0,0,163,164,
        5,104,0,0,164,50,1,0,0,0,165,166,5,114,0,0,166,167,5,101,0,0,167,
        168,5,116,0,0,168,169,5,117,0,0,169,170,5,114,0,0,170,171,5,110,
        0,0,171,52,1,0,0,0,172,173,5,102,0,0,173,174,5,108,0,0,174,175,5,
        111,0,0,175,176,5,111,0,0,176,177,5,114,0,0,177,54,1,0,0,0,178,179,
        5,102,0,0,179,180,5,117,0,0,180,181,5,110,0,0,181,182,5,99,0,0,182,
        183,5,116,0,0,183,184,5,105,0,0,184,185,5,111,0,0,185,186,5,110,
        0,0,186,56,1,0,0,0,187,188,5,97,0,0,188,189,5,110,0,0,189,190,5,
        100,0,0,190,58,1,0,0,0,191,192,5,111,0,0,192,193,5,114,0,0,193,60,
        1,0,0,0,194,195,5,0,0,1,195,62,1,0,0,0,1,0,1,6,0,0
    ]

class algoCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    TOK_VAR = 2
    TOK_NUM = 3
    TOK_ASSIGN = 4
    TOK_IS_EQUAL = 5
    TOK_NOT_EQUAL = 6
    TOK_SMALLER = 7
    TOK_GREATER = 8
    TOK_PLUS = 9
    TOK_MINUS = 10
    TOK_MUL = 11
    TOK_DIV = 12
    TOK_TAB_L = 13
    TOK_TAB_R = 14
    TOK_ARG_L = 15
    TOK_ARG_R = 16
    TOK_WS = 17
    TON_NL = 18
    TOK_FOR = 19
    TOK_WHILE = 20
    TOK_IF = 21
    TOK_DO = 22
    TOK_TO = 23
    TOK_THEN = 24
    TOK_LEN = 25
    TOK_RETURN = 26
    TOK_FLOOR = 27
    TOK_FUNC = 28
    TOK_AND = 29
    TOK_OR = 30
    TOK_EOF = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "'[a-zA-Z_]+'", "'='", "'?='", "'/='", "'<'", "'>'", 
            "'+'", "'-'", "'*'", "'/'", "'['", "']'", "'('", "')'", "'[ \\t\\r]+'", 
            "'\\n'", "'for'", "'while'", "'if'", "'do'", "'to'", "'then'", 
            "'length'", "'return'", "'floor'", "'function'", "'and'", "'or'" ]

    symbolicNames = [ "<INVALID>",
            "TOK_VAR", "TOK_NUM", "TOK_ASSIGN", "TOK_IS_EQUAL", "TOK_NOT_EQUAL", 
            "TOK_SMALLER", "TOK_GREATER", "TOK_PLUS", "TOK_MINUS", "TOK_MUL", 
            "TOK_DIV", "TOK_TAB_L", "TOK_TAB_R", "TOK_ARG_L", "TOK_ARG_R", 
            "TOK_WS", "TON_NL", "TOK_FOR", "TOK_WHILE", "TOK_IF", "TOK_DO", 
            "TOK_TO", "TOK_THEN", "TOK_LEN", "TOK_RETURN", "TOK_FLOOR", 
            "TOK_FUNC", "TOK_AND", "TOK_OR", "TOK_EOF" ]

    ruleNames = [ "T__0", "TOK_VAR", "TOK_NUM", "TOK_ASSIGN", "TOK_IS_EQUAL", 
                  "TOK_NOT_EQUAL", "TOK_SMALLER", "TOK_GREATER", "TOK_PLUS", 
                  "TOK_MINUS", "TOK_MUL", "TOK_DIV", "TOK_TAB_L", "TOK_TAB_R", 
                  "TOK_ARG_L", "TOK_ARG_R", "TOK_WS", "TON_NL", "TOK_FOR", 
                  "TOK_WHILE", "TOK_IF", "TOK_DO", "TOK_TO", "TOK_THEN", 
                  "TOK_LEN", "TOK_RETURN", "TOK_FLOOR", "TOK_FUNC", "TOK_AND", 
                  "TOK_OR", "TOK_EOF" ]

    grammarFileName = "algoCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


